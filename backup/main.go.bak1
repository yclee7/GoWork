package main

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type User struct {
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
	Email     string    `json:"email"`
	CreatedAt time.Time `json:"created_at"`
}

type myHandler struct{}

func (f *myHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	user := new(User)
	err := json.NewDecoder(r.Body).Decode(user)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		fmt.Fprint(w, "Bad Request: ", err)
		return
	}
	user.CreatedAt = time.Now()
	data, _ := json.Marshal(user)
	w.Header().Add("content-type", "aplication/json")
	w.WriteHeader(http.StatusOK)
	fmt.Fprint(w, string(data))
}

func testHandler(w http.ResponseWriter, r *http.Request) {
	name := r.URL.Query().Get("name")
	if name == "" {
		name = "New Name"
	}
	fmt.Fprintf(w, "Hello World1 test %s", name)
}

func main() {

	//fmt.Println("Hello World")
	// 정적 처리
	/*
		http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
			fmt.Fprint(w, "Hello World")
		})

		http.HandleFunc("/sub", func(w http.ResponseWriter, r *http.Request) {
			fmt.Fprint(w, "Hello World1")
		})

		http.HandleFunc("/test", testHandler)

		http.Handle("/my", &myHandler{})

		http.ListenAndServe(":3001", nil)
	*/

	//  먹스 활용 :동적

	mux := http.NewServeMux()

	mux.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprint(w, "Hello World")
	})

	mux.HandleFunc("/sub", func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprint(w, "Hello World1")
	})

	mux.HandleFunc("/test", testHandler)

	mux.Handle("/my", &myHandler{})

	http.ListenAndServe(":3002", mux)

}
